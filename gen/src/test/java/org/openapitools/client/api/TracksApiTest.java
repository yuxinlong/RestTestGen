/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AudioAnalysisObject;
import org.openapitools.client.model.AudioFeaturesObject;
import java.math.BigDecimal;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineResponse20011;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.PagingPlaylistTrackObject;
import org.openapitools.client.model.PagingSavedTrackObject;
import org.openapitools.client.model.PagingSimplifiedTrackObject;
import org.openapitools.client.model.PagingTrackObject;
import org.openapitools.client.model.RecommendationsObject;
import org.openapitools.client.model.TrackObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TracksApi
 */
@Ignore
public class TracksApiTest {

    private final TracksApi api = new TracksApi();

    
    /**
     * Add Items to Playlist 
     *
     * Add one or more items to a user&#39;s playlist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTracksToPlaylistTest() throws ApiException {
        String playlistId = null;
        Integer position = null;
        String uris = null;
        Map<String, Object> requestBody = null;
        InlineResponse20011 response = api.addTracksToPlaylist(playlistId, position, uris, requestBody);

        // TODO: test validations
    }
    
    /**
     * Check User&#39;s Saved Tracks 
     *
     * Check if one or more tracks is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedTracksTest() throws ApiException {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedTracks(ids);

        // TODO: test validations
    }
    
    /**
     * Get Album Tracks 
     *
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnAlbumsTracksTest() throws ApiException {
        String id = null;
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSimplifiedTrackObject response = api.getAnAlbumsTracks(id, market, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Get Artist&#39;s Top Tracks 
     *
     * Get Spotify catalog information about an artist&#39;s top tracks by country. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnArtistsTopTracksTest() throws ApiException {
        String id = null;
        String market = null;
        InlineResponse2002 response = api.getAnArtistsTopTracks(id, market);

        // TODO: test validations
    }
    
    /**
     * Get Track&#39;s Audio Analysis 
     *
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAudioAnalysisTest() throws ApiException {
        String id = null;
        AudioAnalysisObject response = api.getAudioAnalysis(id);

        // TODO: test validations
    }
    
    /**
     * Get Track&#39;s Audio Features 
     *
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAudioFeaturesTest() throws ApiException {
        String id = null;
        AudioFeaturesObject response = api.getAudioFeatures(id);

        // TODO: test validations
    }
    
    /**
     * Get Playlist Items 
     *
     * Get full details of the items of a playlist owned by a Spotify user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaylistsTracksTest() throws ApiException {
        String playlistId = null;
        String market = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String additionalTypes = null;
        PagingPlaylistTrackObject response = api.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes);

        // TODO: test validations
    }
    
    /**
     * Get Recommendations 
     *
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendationsTest() throws ApiException {
        Integer limit = null;
        String market = null;
        String seedArtists = null;
        String seedGenres = null;
        String seedTracks = null;
        BigDecimal minAcousticness = null;
        BigDecimal maxAcousticness = null;
        BigDecimal targetAcousticness = null;
        BigDecimal minDanceability = null;
        BigDecimal maxDanceability = null;
        BigDecimal targetDanceability = null;
        Integer minDurationMs = null;
        Integer maxDurationMs = null;
        Integer targetDurationMs = null;
        BigDecimal minEnergy = null;
        BigDecimal maxEnergy = null;
        BigDecimal targetEnergy = null;
        BigDecimal minInstrumentalness = null;
        BigDecimal maxInstrumentalness = null;
        BigDecimal targetInstrumentalness = null;
        Integer minKey = null;
        Integer maxKey = null;
        Integer targetKey = null;
        BigDecimal minLiveness = null;
        BigDecimal maxLiveness = null;
        BigDecimal targetLiveness = null;
        BigDecimal minLoudness = null;
        BigDecimal maxLoudness = null;
        BigDecimal targetLoudness = null;
        Integer minMode = null;
        Integer maxMode = null;
        Integer targetMode = null;
        Integer minPopularity = null;
        Integer maxPopularity = null;
        Integer targetPopularity = null;
        BigDecimal minSpeechiness = null;
        BigDecimal maxSpeechiness = null;
        BigDecimal targetSpeechiness = null;
        BigDecimal minTempo = null;
        BigDecimal maxTempo = null;
        BigDecimal targetTempo = null;
        Integer minTimeSignature = null;
        Integer maxTimeSignature = null;
        Integer targetTimeSignature = null;
        BigDecimal minValence = null;
        BigDecimal maxValence = null;
        BigDecimal targetValence = null;
        RecommendationsObject response = api.getRecommendations(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence);

        // TODO: test validations
    }
    
    /**
     * Get Tracks&#39; Audio Features 
     *
     * Get audio features for multiple tracks based on their Spotify IDs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSeveralAudioFeaturesTest() throws ApiException {
        String ids = null;
        InlineResponse2003 response = api.getSeveralAudioFeatures(ids);

        // TODO: test validations
    }
    
    /**
     * Get Several Tracks 
     *
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSeveralTracksTest() throws ApiException {
        String ids = null;
        String market = null;
        InlineResponse2002 response = api.getSeveralTracks(ids, market);

        // TODO: test validations
    }
    
    /**
     * Get Track 
     *
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackTest() throws ApiException {
        String id = null;
        String market = null;
        TrackObject response = api.getTrack(id, market);

        // TODO: test validations
    }
    
    /**
     * Get User&#39;s Saved Tracks 
     *
     * Get a list of the songs saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedTracksTest() throws ApiException {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedTrackObject response = api.getUsersSavedTracks(market, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Get User&#39;s Top Tracks 
     *
     * Get the current user&#39;s top tracks based on calculated affinity. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTopTracksTest() throws ApiException {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingTrackObject response = api.getUsersTopTracks(timeRange, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Remove Playlist Items 
     *
     * Remove one or more items from a user&#39;s playlist. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTracksPlaylistTest() throws ApiException {
        String playlistId = null;
        InlineObject2 inlineObject2 = null;
        InlineResponse20011 response = api.removeTracksPlaylist(playlistId, inlineObject2);

        // TODO: test validations
    }
    
    /**
     * Remove User&#39;s Saved Tracks 
     *
     * Remove one or more tracks from the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTracksUserTest() throws ApiException {
        String ids = null;
        Map<String, Object> requestBody = null;
        api.removeTracksUser(ids, requestBody);

        // TODO: test validations
    }
    
    /**
     * Update Playlist Items 
     *
     * Either reorder or replace items in a playlist depending on the request&#39;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#39;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#39;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#39;t be applied together in a single request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderOrReplacePlaylistsTracksTest() throws ApiException {
        String playlistId = null;
        String uris = null;
        Map<String, Object> requestBody = null;
        InlineResponse20011 response = api.reorderOrReplacePlaylistsTracks(playlistId, uris, requestBody);

        // TODO: test validations
    }
    
    /**
     * Save Tracks for Current User 
     *
     * Save one or more tracks to the current user&#39;s &#39;Your Music&#39; library. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveTracksUserTest() throws ApiException {
        String ids = null;
        Map<String, Object> requestBody = null;
        api.saveTracksUser(ids, requestBody);

        // TODO: test validations
    }
    
}
