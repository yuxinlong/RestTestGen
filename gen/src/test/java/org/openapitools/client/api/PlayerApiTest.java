/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurrentlyPlayingContextObject;
import org.openapitools.client.model.CurrentlyPlayingObject;
import org.openapitools.client.model.CursorPagingPlayHistoryObject;
import org.openapitools.client.model.DevicesObject;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.QueueObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayerApi
 */
@Ignore
public class PlayerApiTest {

    private final PlayerApi api = new PlayerApi();

    
    /**
     * Add Item to Playback Queue 
     *
     * Add an item to the end of the user&#39;s current playback queue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addToQueueTest() throws ApiException {
        String uri = null;
        String deviceId = null;
        api.addToQueue(uri, deviceId);

        // TODO: test validations
    }
    
    /**
     * Get Available Devices 
     *
     * Get information about a user’s available devices. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAUsersAvailableDevicesTest() throws ApiException {
        DevicesObject response = api.getAUsersAvailableDevices();

        // TODO: test validations
    }
    
    /**
     * Get Playback State 
     *
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInformationAboutTheUsersCurrentPlaybackTest() throws ApiException {
        String market = null;
        String additionalTypes = null;
        CurrentlyPlayingContextObject response = api.getInformationAboutTheUsersCurrentPlayback(market, additionalTypes);

        // TODO: test validations
    }
    
    /**
     * Get the User&#39;s Queue 
     *
     * Get the list of objects that make up the user&#39;s queue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueueTest() throws ApiException {
        QueueObject response = api.getQueue();

        // TODO: test validations
    }
    
    /**
     * Get Recently Played Tracks 
     *
     * Get tracks from the current user&#39;s recently played tracks. _**Note**: Currently doesn&#39;t support podcast episodes._ 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecentlyPlayedTest() throws ApiException {
        Integer limit = null;
        Integer after = null;
        Integer before = null;
        CursorPagingPlayHistoryObject response = api.getRecentlyPlayed(limit, after, before);

        // TODO: test validations
    }
    
    /**
     * Get Currently Playing Track 
     *
     * Get the object currently being played on the user&#39;s Spotify account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTheUsersCurrentlyPlayingTrackTest() throws ApiException {
        String market = null;
        String additionalTypes = null;
        CurrentlyPlayingObject response = api.getTheUsersCurrentlyPlayingTrack(market, additionalTypes);

        // TODO: test validations
    }
    
    /**
     * Pause Playback 
     *
     * Pause playback on the user&#39;s account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pauseAUsersPlaybackTest() throws ApiException {
        String deviceId = null;
        api.pauseAUsersPlayback(deviceId);

        // TODO: test validations
    }
    
    /**
     * Seek To Position 
     *
     * Seeks to the given position in the user’s currently playing track. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void seekToPositionInCurrentlyPlayingTrackTest() throws ApiException {
        Integer positionMs = null;
        String deviceId = null;
        api.seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId);

        // TODO: test validations
    }
    
    /**
     * Set Repeat Mode 
     *
     * Set the repeat mode for the user&#39;s playback. Options are repeat-track, repeat-context, and off. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRepeatModeOnUsersPlaybackTest() throws ApiException {
        String state = null;
        String deviceId = null;
        api.setRepeatModeOnUsersPlayback(state, deviceId);

        // TODO: test validations
    }
    
    /**
     * Set Playback Volume 
     *
     * Set the volume for the user’s current playback device. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVolumeForUsersPlaybackTest() throws ApiException {
        Integer volumePercent = null;
        String deviceId = null;
        api.setVolumeForUsersPlayback(volumePercent, deviceId);

        // TODO: test validations
    }
    
    /**
     * Skip To Next 
     *
     * Skips to next track in the user’s queue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skipUsersPlaybackToNextTrackTest() throws ApiException {
        String deviceId = null;
        api.skipUsersPlaybackToNextTrack(deviceId);

        // TODO: test validations
    }
    
    /**
     * Skip To Previous 
     *
     * Skips to previous track in the user’s queue. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void skipUsersPlaybackToPreviousTrackTest() throws ApiException {
        String deviceId = null;
        api.skipUsersPlaybackToPreviousTrack(deviceId);

        // TODO: test validations
    }
    
    /**
     * Start/Resume Playback 
     *
     * Start a new context or resume current playback on the user&#39;s active device. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startAUsersPlaybackTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> requestBody = null;
        api.startAUsersPlayback(deviceId, requestBody);

        // TODO: test validations
    }
    
    /**
     * Toggle Playback Shuffle 
     *
     * Toggle shuffle on or off for user’s playback. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleShuffleForUsersPlaybackTest() throws ApiException {
        Boolean state = null;
        String deviceId = null;
        api.toggleShuffleForUsersPlayback(state, deviceId);

        // TODO: test validations
    }
    
    /**
     * Transfer Playback 
     *
     * Transfer playback to a new device and determine if it should start playing. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferAUsersPlaybackTest() throws ApiException {
        Map<String, Object> requestBody = null;
        api.transferAUsersPlayback(requestBody);

        // TODO: test validations
    }
    
}
