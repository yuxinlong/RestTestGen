/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ContextObject;
import org.openapitools.client.model.DeviceObject;
import org.openapitools.client.model.DisallowsObject;
import org.openapitools.client.model.OneOfTrackObjectEpisodeObject;

/**
 * CurrentlyPlayingContextObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class CurrentlyPlayingContextObject {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private DisallowsObject actions = null;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ContextObject context = null;

  public static final String SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE = "currently_playing_type";
  @SerializedName(SERIALIZED_NAME_CURRENTLY_PLAYING_TYPE)
  private String currentlyPlayingType;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private DeviceObject device = null;

  public static final String SERIALIZED_NAME_IS_PLAYING = "is_playing";
  @SerializedName(SERIALIZED_NAME_IS_PLAYING)
  private Boolean isPlaying;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private OneOfTrackObjectEpisodeObject item = null;

  public static final String SERIALIZED_NAME_PROGRESS_MS = "progress_ms";
  @SerializedName(SERIALIZED_NAME_PROGRESS_MS)
  private Integer progressMs;

  public static final String SERIALIZED_NAME_REPEAT_STATE = "repeat_state";
  @SerializedName(SERIALIZED_NAME_REPEAT_STATE)
  private String repeatState;

  public static final String SERIALIZED_NAME_SHUFFLE_STATE = "shuffle_state";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_STATE)
  private Boolean shuffleState;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;


  public CurrentlyPlayingContextObject actions(DisallowsObject actions) {
    
    this.actions = actions;
    return this;
  }

   /**
   * Allows to update the user interface based on which playback actions are available within the current context. 
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows to update the user interface based on which playback actions are available within the current context. ")

  public DisallowsObject getActions() {
    return actions;
  }


  public void setActions(DisallowsObject actions) {
    this.actions = actions;
  }


  public CurrentlyPlayingContextObject context(ContextObject context) {
    
    this.context = context;
    return this;
  }

   /**
   * A Context Object. Can be &#x60;null&#x60;.
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Context Object. Can be `null`.")

  public ContextObject getContext() {
    return context;
  }


  public void setContext(ContextObject context) {
    this.context = context;
  }


  public CurrentlyPlayingContextObject currentlyPlayingType(String currentlyPlayingType) {
    
    this.currentlyPlayingType = currentlyPlayingType;
    return this;
  }

   /**
   * The object type of the currently playing item. Can be one of &#x60;track&#x60;, &#x60;episode&#x60;, &#x60;ad&#x60; or &#x60;unknown&#x60;. 
   * @return currentlyPlayingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. ")

  public String getCurrentlyPlayingType() {
    return currentlyPlayingType;
  }


  public void setCurrentlyPlayingType(String currentlyPlayingType) {
    this.currentlyPlayingType = currentlyPlayingType;
  }


  public CurrentlyPlayingContextObject device(DeviceObject device) {
    
    this.device = device;
    return this;
  }

   /**
   * The device that is currently active. 
   * @return device
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The device that is currently active. ")

  public DeviceObject getDevice() {
    return device;
  }


  public void setDevice(DeviceObject device) {
    this.device = device;
  }


  public CurrentlyPlayingContextObject isPlaying(Boolean isPlaying) {
    
    this.isPlaying = isPlaying;
    return this;
  }

   /**
   * If something is currently playing, return &#x60;true&#x60;.
   * @return isPlaying
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If something is currently playing, return `true`.")

  public Boolean getIsPlaying() {
    return isPlaying;
  }


  public void setIsPlaying(Boolean isPlaying) {
    this.isPlaying = isPlaying;
  }


  public CurrentlyPlayingContextObject item(OneOfTrackObjectEpisodeObject item) {
    
    this.item = item;
    return this;
  }

   /**
   * The currently playing track or episode. Can be &#x60;null&#x60;.
   * @return item
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currently playing track or episode. Can be `null`.")

  public OneOfTrackObjectEpisodeObject getItem() {
    return item;
  }


  public void setItem(OneOfTrackObjectEpisodeObject item) {
    this.item = item;
  }


  public CurrentlyPlayingContextObject progressMs(Integer progressMs) {
    
    this.progressMs = progressMs;
    return this;
  }

   /**
   * Progress into the currently playing track or episode. Can be &#x60;null&#x60;.
   * @return progressMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Progress into the currently playing track or episode. Can be `null`.")

  public Integer getProgressMs() {
    return progressMs;
  }


  public void setProgressMs(Integer progressMs) {
    this.progressMs = progressMs;
  }


  public CurrentlyPlayingContextObject repeatState(String repeatState) {
    
    this.repeatState = repeatState;
    return this;
  }

   /**
   * off, track, context
   * @return repeatState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "off, track, context")

  public String getRepeatState() {
    return repeatState;
  }


  public void setRepeatState(String repeatState) {
    this.repeatState = repeatState;
  }


  public CurrentlyPlayingContextObject shuffleState(Boolean shuffleState) {
    
    this.shuffleState = shuffleState;
    return this;
  }

   /**
   * If shuffle is on or off.
   * @return shuffleState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If shuffle is on or off.")

  public Boolean getShuffleState() {
    return shuffleState;
  }


  public void setShuffleState(Boolean shuffleState) {
    this.shuffleState = shuffleState;
  }


  public CurrentlyPlayingContextObject timestamp(Integer timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Unix Millisecond Timestamp when data was fetched.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unix Millisecond Timestamp when data was fetched.")

  public Integer getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentlyPlayingContextObject currentlyPlayingContextObject = (CurrentlyPlayingContextObject) o;
    return Objects.equals(this.actions, currentlyPlayingContextObject.actions) &&
        Objects.equals(this.context, currentlyPlayingContextObject.context) &&
        Objects.equals(this.currentlyPlayingType, currentlyPlayingContextObject.currentlyPlayingType) &&
        Objects.equals(this.device, currentlyPlayingContextObject.device) &&
        Objects.equals(this.isPlaying, currentlyPlayingContextObject.isPlaying) &&
        Objects.equals(this.item, currentlyPlayingContextObject.item) &&
        Objects.equals(this.progressMs, currentlyPlayingContextObject.progressMs) &&
        Objects.equals(this.repeatState, currentlyPlayingContextObject.repeatState) &&
        Objects.equals(this.shuffleState, currentlyPlayingContextObject.shuffleState) &&
        Objects.equals(this.timestamp, currentlyPlayingContextObject.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, context, currentlyPlayingType, device, isPlaying, item, progressMs, repeatState, shuffleState, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentlyPlayingContextObject {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    currentlyPlayingType: ").append(toIndentedString(currentlyPlayingType)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    progressMs: ").append(toIndentedString(progressMs)).append("\n");
    sb.append("    repeatState: ").append(toIndentedString(repeatState)).append("\n");
    sb.append("    shuffleState: ").append(toIndentedString(shuffleState)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

