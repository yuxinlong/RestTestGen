/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ExplicitContentSettingsObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class ExplicitContentSettingsObject {
  public static final String SERIALIZED_NAME_FILTER_ENABLED = "filter_enabled";
  @SerializedName(SERIALIZED_NAME_FILTER_ENABLED)
  private Boolean filterEnabled;

  public static final String SERIALIZED_NAME_FILTER_LOCKED = "filter_locked";
  @SerializedName(SERIALIZED_NAME_FILTER_LOCKED)
  private Boolean filterLocked;


  public ExplicitContentSettingsObject filterEnabled(Boolean filterEnabled) {
    
    this.filterEnabled = filterEnabled;
    return this;
  }

   /**
   * When &#x60;true&#x60;, indicates that explicit content should not be played. 
   * @return filterEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When `true`, indicates that explicit content should not be played. ")

  public Boolean getFilterEnabled() {
    return filterEnabled;
  }


  public void setFilterEnabled(Boolean filterEnabled) {
    this.filterEnabled = filterEnabled;
  }


  public ExplicitContentSettingsObject filterLocked(Boolean filterLocked) {
    
    this.filterLocked = filterLocked;
    return this;
  }

   /**
   * When &#x60;true&#x60;, indicates that the explicit content setting is locked and can&#39;t be changed by the user. 
   * @return filterLocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When `true`, indicates that the explicit content setting is locked and can't be changed by the user. ")

  public Boolean getFilterLocked() {
    return filterLocked;
  }


  public void setFilterLocked(Boolean filterLocked) {
    this.filterLocked = filterLocked;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExplicitContentSettingsObject explicitContentSettingsObject = (ExplicitContentSettingsObject) o;
    return Objects.equals(this.filterEnabled, explicitContentSettingsObject.filterEnabled) &&
        Objects.equals(this.filterLocked, explicitContentSettingsObject.filterLocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterEnabled, filterLocked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExplicitContentSettingsObject {\n");
    sb.append("    filterEnabled: ").append(toIndentedString(filterEnabled)).append("\n");
    sb.append("    filterLocked: ").append(toIndentedString(filterLocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

