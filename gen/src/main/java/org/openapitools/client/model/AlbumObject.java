/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AlbumBase;
import org.openapitools.client.model.AlbumObjectAllOf;
import org.openapitools.client.model.AlbumRestrictionObject;
import org.openapitools.client.model.CopyrightObject;
import org.openapitools.client.model.ExternalIdObject;
import org.openapitools.client.model.ExternalUrlObject;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.PagingSimplifiedTrackObject;
import org.openapitools.client.model.SimplifiedArtistObject;

/**
 * AlbumObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class AlbumObject {
  /**
   * The type of the album. 
   */
  @JsonAdapter(AlbumTypeEnum.Adapter.class)
  public enum AlbumTypeEnum {
    ALBUM("album"),
    
    SINGLE("single"),
    
    COMPILATION("compilation");

    private String value;

    AlbumTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlbumTypeEnum fromValue(String value) {
      for (AlbumTypeEnum b : AlbumTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlbumTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlbumTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlbumTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlbumTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALBUM_TYPE = "album_type";
  @SerializedName(SERIALIZED_NAME_ALBUM_TYPE)
  private AlbumTypeEnum albumType;

  public static final String SERIALIZED_NAME_AVAILABLE_MARKETS = "available_markets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MARKETS)
  private List<String> availableMarkets = new ArrayList<String>();

  public static final String SERIALIZED_NAME_EXTERNAL_URLS = "external_urls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
  private ExternalUrlObject externalUrls = null;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImageObject> images = new ArrayList<ImageObject>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  /**
   * The precision with which &#x60;release_date&#x60; value is known. 
   */
  @JsonAdapter(ReleaseDatePrecisionEnum.Adapter.class)
  public enum ReleaseDatePrecisionEnum {
    YEAR("year"),
    
    MONTH("month"),
    
    DAY("day");

    private String value;

    ReleaseDatePrecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReleaseDatePrecisionEnum fromValue(String value) {
      for (ReleaseDatePrecisionEnum b : ReleaseDatePrecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReleaseDatePrecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReleaseDatePrecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReleaseDatePrecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReleaseDatePrecisionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RELEASE_DATE_PRECISION = "release_date_precision";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE_PRECISION)
  private ReleaseDatePrecisionEnum releaseDatePrecision;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private AlbumRestrictionObject restrictions = null;

  public static final String SERIALIZED_NAME_TOTAL_TRACKS = "total_tracks";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRACKS)
  private Integer totalTracks;

  /**
   * The object type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALBUM("album");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<SimplifiedArtistObject> artists = null;

  public static final String SERIALIZED_NAME_COPYRIGHTS = "copyrights";
  @SerializedName(SERIALIZED_NAME_COPYRIGHTS)
  private List<CopyrightObject> copyrights = null;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "external_ids";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private ExternalIdObject externalIds = null;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<String> genres = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private PagingSimplifiedTrackObject tracks = null;


  public AlbumObject albumType(AlbumTypeEnum albumType) {
    
    this.albumType = albumType;
    return this;
  }

   /**
   * The type of the album. 
   * @return albumType
  **/
  @ApiModelProperty(example = "compilation", required = true, value = "The type of the album. ")

  public AlbumTypeEnum getAlbumType() {
    return albumType;
  }


  public void setAlbumType(AlbumTypeEnum albumType) {
    this.albumType = albumType;
  }


  public AlbumObject availableMarkets(List<String> availableMarkets) {
    
    this.availableMarkets = availableMarkets;
    return this;
  }

  public AlbumObject addAvailableMarketsItem(String availableMarketsItem) {
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

   /**
   * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
   * @return availableMarkets
  **/
  @ApiModelProperty(example = "[\"CA\",\"BR\",\"IT\"]", required = true, value = "The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ ")

  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }


  public void setAvailableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
  }


  public AlbumObject externalUrls(ExternalUrlObject externalUrls) {
    
    this.externalUrls = externalUrls;
    return this;
  }

   /**
   * Known external URLs for this album. 
   * @return externalUrls
  **/
  @ApiModelProperty(required = true, value = "Known external URLs for this album. ")

  public ExternalUrlObject getExternalUrls() {
    return externalUrls;
  }


  public void setExternalUrls(ExternalUrlObject externalUrls) {
    this.externalUrls = externalUrls;
  }


  public AlbumObject href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * A link to the Web API endpoint providing full details of the album. 
   * @return href
  **/
  @ApiModelProperty(required = true, value = "A link to the Web API endpoint providing full details of the album. ")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public AlbumObject id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the album. 
   * @return id
  **/
  @ApiModelProperty(example = "2up3OPMp9Tb4dAKM2erWXQ", required = true, value = "The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the album. ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public AlbumObject images(List<ImageObject> images) {
    
    this.images = images;
    return this;
  }

  public AlbumObject addImagesItem(ImageObject imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * The cover art for the album in various sizes, widest first. 
   * @return images
  **/
  @ApiModelProperty(required = true, value = "The cover art for the album in various sizes, widest first. ")

  public List<ImageObject> getImages() {
    return images;
  }


  public void setImages(List<ImageObject> images) {
    this.images = images;
  }


  public AlbumObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the album. In case of an album takedown, the value may be an empty string. 
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the album. In case of an album takedown, the value may be an empty string. ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AlbumObject releaseDate(String releaseDate) {
    
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * The date the album was first released. 
   * @return releaseDate
  **/
  @ApiModelProperty(example = "1981-12", required = true, value = "The date the album was first released. ")

  public String getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public AlbumObject releaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
    
    this.releaseDatePrecision = releaseDatePrecision;
    return this;
  }

   /**
   * The precision with which &#x60;release_date&#x60; value is known. 
   * @return releaseDatePrecision
  **/
  @ApiModelProperty(example = "year", required = true, value = "The precision with which `release_date` value is known. ")

  public ReleaseDatePrecisionEnum getReleaseDatePrecision() {
    return releaseDatePrecision;
  }


  public void setReleaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
    this.releaseDatePrecision = releaseDatePrecision;
  }


  public AlbumObject restrictions(AlbumRestrictionObject restrictions) {
    
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Included in the response when a content restriction is applied. 
   * @return restrictions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Included in the response when a content restriction is applied. ")

  public AlbumRestrictionObject getRestrictions() {
    return restrictions;
  }


  public void setRestrictions(AlbumRestrictionObject restrictions) {
    this.restrictions = restrictions;
  }


  public AlbumObject totalTracks(Integer totalTracks) {
    
    this.totalTracks = totalTracks;
    return this;
  }

   /**
   * The number of tracks in the album.
   * @return totalTracks
  **/
  @ApiModelProperty(example = "9", required = true, value = "The number of tracks in the album.")

  public Integer getTotalTracks() {
    return totalTracks;
  }


  public void setTotalTracks(Integer totalTracks) {
    this.totalTracks = totalTracks;
  }


  public AlbumObject type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The object type. 
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The object type. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AlbumObject uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the album. 
   * @return uri
  **/
  @ApiModelProperty(example = "spotify:album:2up3OPMp9Tb4dAKM2erWXQ", required = true, value = "The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the album. ")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public AlbumObject artists(List<SimplifiedArtistObject> artists) {
    
    this.artists = artists;
    return this;
  }

  public AlbumObject addArtistsItem(SimplifiedArtistObject artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<SimplifiedArtistObject>();
    }
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists of the album. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist. 
   * @return artists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. ")

  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }


  public void setArtists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
  }


  public AlbumObject copyrights(List<CopyrightObject> copyrights) {
    
    this.copyrights = copyrights;
    return this;
  }

  public AlbumObject addCopyrightsItem(CopyrightObject copyrightsItem) {
    if (this.copyrights == null) {
      this.copyrights = new ArrayList<CopyrightObject>();
    }
    this.copyrights.add(copyrightsItem);
    return this;
  }

   /**
   * The copyright statements of the album.
   * @return copyrights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The copyright statements of the album.")

  public List<CopyrightObject> getCopyrights() {
    return copyrights;
  }


  public void setCopyrights(List<CopyrightObject> copyrights) {
    this.copyrights = copyrights;
  }


  public AlbumObject externalIds(ExternalIdObject externalIds) {
    
    this.externalIds = externalIds;
    return this;
  }

   /**
   * Known external IDs for the album. 
   * @return externalIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Known external IDs for the album. ")

  public ExternalIdObject getExternalIds() {
    return externalIds;
  }


  public void setExternalIds(ExternalIdObject externalIds) {
    this.externalIds = externalIds;
  }


  public AlbumObject genres(List<String> genres) {
    
    this.genres = genres;
    return this;
  }

  public AlbumObject addGenresItem(String genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<String>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * A list of the genres used to classify the album. (If not yet classified, the array is empty.)
   * @return genres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of the genres used to classify the album. (If not yet classified, the array is empty.)")

  public List<String> getGenres() {
    return genres;
  }


  public void setGenres(List<String> genres) {
    this.genres = genres;
  }


  public AlbumObject label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * The label for the album.
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The label for the album.")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public AlbumObject popularity(Integer popularity) {
    
    this.popularity = popularity;
    return this;
  }

   /**
   * The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album&#39;s individual tracks.
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.")

  public Integer getPopularity() {
    return popularity;
  }


  public void setPopularity(Integer popularity) {
    this.popularity = popularity;
  }


  public AlbumObject tracks(PagingSimplifiedTrackObject tracks) {
    
    this.tracks = tracks;
    return this;
  }

   /**
   * The tracks of the album. 
   * @return tracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tracks of the album. ")

  public PagingSimplifiedTrackObject getTracks() {
    return tracks;
  }


  public void setTracks(PagingSimplifiedTrackObject tracks) {
    this.tracks = tracks;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumObject albumObject = (AlbumObject) o;
    return Objects.equals(this.albumType, albumObject.albumType) &&
        Objects.equals(this.availableMarkets, albumObject.availableMarkets) &&
        Objects.equals(this.externalUrls, albumObject.externalUrls) &&
        Objects.equals(this.href, albumObject.href) &&
        Objects.equals(this.id, albumObject.id) &&
        Objects.equals(this.images, albumObject.images) &&
        Objects.equals(this.name, albumObject.name) &&
        Objects.equals(this.releaseDate, albumObject.releaseDate) &&
        Objects.equals(this.releaseDatePrecision, albumObject.releaseDatePrecision) &&
        Objects.equals(this.restrictions, albumObject.restrictions) &&
        Objects.equals(this.totalTracks, albumObject.totalTracks) &&
        Objects.equals(this.type, albumObject.type) &&
        Objects.equals(this.uri, albumObject.uri) &&
        Objects.equals(this.artists, albumObject.artists) &&
        Objects.equals(this.copyrights, albumObject.copyrights) &&
        Objects.equals(this.externalIds, albumObject.externalIds) &&
        Objects.equals(this.genres, albumObject.genres) &&
        Objects.equals(this.label, albumObject.label) &&
        Objects.equals(this.popularity, albumObject.popularity) &&
        Objects.equals(this.tracks, albumObject.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumType, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, restrictions, totalTracks, type, uri, artists, copyrights, externalIds, genres, label, popularity, tracks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumObject {\n");
    sb.append("    albumType: ").append(toIndentedString(albumType)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseDatePrecision: ").append(toIndentedString(releaseDatePrecision)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    totalTracks: ").append(toIndentedString(totalTracks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    copyrights: ").append(toIndentedString(copyrights)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

