/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TuneableTrackObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class TuneableTrackObject {
  public static final String SERIALIZED_NAME_ACOUSTICNESS = "acousticness";
  @SerializedName(SERIALIZED_NAME_ACOUSTICNESS)
  private Float acousticness;

  public static final String SERIALIZED_NAME_DANCEABILITY = "danceability";
  @SerializedName(SERIALIZED_NAME_DANCEABILITY)
  private Float danceability;

  public static final String SERIALIZED_NAME_DURATION_MS = "duration_ms";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_ENERGY = "energy";
  @SerializedName(SERIALIZED_NAME_ENERGY)
  private Float energy;

  public static final String SERIALIZED_NAME_INSTRUMENTALNESS = "instrumentalness";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTALNESS)
  private Float instrumentalness;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_LIVENESS = "liveness";
  @SerializedName(SERIALIZED_NAME_LIVENESS)
  private Float liveness;

  public static final String SERIALIZED_NAME_LOUDNESS = "loudness";
  @SerializedName(SERIALIZED_NAME_LOUDNESS)
  private Float loudness;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Float popularity;

  public static final String SERIALIZED_NAME_SPEECHINESS = "speechiness";
  @SerializedName(SERIALIZED_NAME_SPEECHINESS)
  private Float speechiness;

  public static final String SERIALIZED_NAME_TEMPO = "tempo";
  @SerializedName(SERIALIZED_NAME_TEMPO)
  private Float tempo;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE = "time_signature";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE)
  private Integer timeSignature;

  public static final String SERIALIZED_NAME_VALENCE = "valence";
  @SerializedName(SERIALIZED_NAME_VALENCE)
  private Float valence;


  public TuneableTrackObject acousticness(Float acousticness) {
    
    this.acousticness = acousticness;
    return this;
  }

   /**
   * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 
   * @return acousticness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. ")

  public Float getAcousticness() {
    return acousticness;
  }


  public void setAcousticness(Float acousticness) {
    this.acousticness = acousticness;
  }


  public TuneableTrackObject danceability(Float danceability) {
    
    this.danceability = danceability;
    return this;
  }

   /**
   * Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 
   * @return danceability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. ")

  public Float getDanceability() {
    return danceability;
  }


  public void setDanceability(Float danceability) {
    this.danceability = danceability;
  }


  public TuneableTrackObject durationMs(Integer durationMs) {
    
    this.durationMs = durationMs;
    return this;
  }

   /**
   * The duration of the track in milliseconds. 
   * @return durationMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration of the track in milliseconds. ")

  public Integer getDurationMs() {
    return durationMs;
  }


  public void setDurationMs(Integer durationMs) {
    this.durationMs = durationMs;
  }


  public TuneableTrackObject energy(Float energy) {
    
    this.energy = energy;
    return this;
  }

   /**
   * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 
   * @return energy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. ")

  public Float getEnergy() {
    return energy;
  }


  public void setEnergy(Float energy) {
    this.energy = energy;
  }


  public TuneableTrackObject instrumentalness(Float instrumentalness) {
    
    this.instrumentalness = instrumentalness;
    return this;
  }

   /**
   * Predicts whether a track contains no vocals. \&quot;Ooh\&quot; and \&quot;aah\&quot; sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \&quot;vocal\&quot;. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 
   * @return instrumentalness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. ")

  public Float getInstrumentalness() {
    return instrumentalness;
  }


  public void setInstrumentalness(Float instrumentalness) {
    this.instrumentalness = instrumentalness;
  }


  public TuneableTrackObject key(Integer key) {
    
    this.key = key;
    return this;
  }

   /**
   * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 &#x3D; C, 1 &#x3D; C♯/D♭, 2 &#x3D; D, and so on. If no key was detected, the value is -1. 
   * minimum: -1
   * maximum: 11
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9", value = "The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. ")

  public Integer getKey() {
    return key;
  }


  public void setKey(Integer key) {
    this.key = key;
  }


  public TuneableTrackObject liveness(Float liveness) {
    
    this.liveness = liveness;
    return this;
  }

   /**
   * Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 
   * @return liveness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. ")

  public Float getLiveness() {
    return liveness;
  }


  public void setLiveness(Float liveness) {
    this.liveness = liveness;
  }


  public TuneableTrackObject loudness(Float loudness) {
    
    this.loudness = loudness;
    return this;
  }

   /**
   * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
   * @return loudness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-5.883", value = "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. ")

  public Float getLoudness() {
    return loudness;
  }


  public void setLoudness(Float loudness) {
    this.loudness = loudness;
  }


  public TuneableTrackObject mode(Integer mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. ")

  public Integer getMode() {
    return mode;
  }


  public void setMode(Integer mode) {
    this.mode = mode;
  }


  public TuneableTrackObject popularity(Float popularity) {
    
    this.popularity = popularity;
    return this;
  }

   /**
   * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the &#x60;market&#x60; parameter, it is expected to find relinked tracks with popularities that do not match &#x60;min_*&#x60;, &#x60;max_*&#x60;and &#x60;target_*&#x60; popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the &#x60;linked_from&#x60; attribute of the [relinked track response](/documentation/general/guides/track-relinking-guide)._ 
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/general/guides/track-relinking-guide)._ ")

  public Float getPopularity() {
    return popularity;
  }


  public void setPopularity(Float popularity) {
    this.popularity = popularity;
  }


  public TuneableTrackObject speechiness(Float speechiness) {
    
    this.speechiness = speechiness;
    return this;
  }

   /**
   * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 
   * @return speechiness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. ")

  public Float getSpeechiness() {
    return speechiness;
  }


  public void setSpeechiness(Float speechiness) {
    this.speechiness = speechiness;
  }


  public TuneableTrackObject tempo(Float tempo) {
    
    this.tempo = tempo;
    return this;
  }

   /**
   * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
   * @return tempo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "118.211", value = "The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. ")

  public Float getTempo() {
    return tempo;
  }


  public void setTempo(Float tempo) {
    this.tempo = tempo;
  }


  public TuneableTrackObject timeSignature(Integer timeSignature) {
    
    this.timeSignature = timeSignature;
    return this;
  }

   /**
   * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \&quot;3/4\&quot;, to \&quot;7/4\&quot;.
   * minimum: 3
   * maximum: 7
   * @return timeSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".")

  public Integer getTimeSignature() {
    return timeSignature;
  }


  public void setTimeSignature(Integer timeSignature) {
    this.timeSignature = timeSignature;
  }


  public TuneableTrackObject valence(Float valence) {
    
    this.valence = valence;
    return this;
  }

   /**
   * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 
   * @return valence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). ")

  public Float getValence() {
    return valence;
  }


  public void setValence(Float valence) {
    this.valence = valence;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TuneableTrackObject tuneableTrackObject = (TuneableTrackObject) o;
    return Objects.equals(this.acousticness, tuneableTrackObject.acousticness) &&
        Objects.equals(this.danceability, tuneableTrackObject.danceability) &&
        Objects.equals(this.durationMs, tuneableTrackObject.durationMs) &&
        Objects.equals(this.energy, tuneableTrackObject.energy) &&
        Objects.equals(this.instrumentalness, tuneableTrackObject.instrumentalness) &&
        Objects.equals(this.key, tuneableTrackObject.key) &&
        Objects.equals(this.liveness, tuneableTrackObject.liveness) &&
        Objects.equals(this.loudness, tuneableTrackObject.loudness) &&
        Objects.equals(this.mode, tuneableTrackObject.mode) &&
        Objects.equals(this.popularity, tuneableTrackObject.popularity) &&
        Objects.equals(this.speechiness, tuneableTrackObject.speechiness) &&
        Objects.equals(this.tempo, tuneableTrackObject.tempo) &&
        Objects.equals(this.timeSignature, tuneableTrackObject.timeSignature) &&
        Objects.equals(this.valence, tuneableTrackObject.valence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acousticness, danceability, durationMs, energy, instrumentalness, key, liveness, loudness, mode, popularity, speechiness, tempo, timeSignature, valence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TuneableTrackObject {\n");
    sb.append("    acousticness: ").append(toIndentedString(acousticness)).append("\n");
    sb.append("    danceability: ").append(toIndentedString(danceability)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    energy: ").append(toIndentedString(energy)).append("\n");
    sb.append("    instrumentalness: ").append(toIndentedString(instrumentalness)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    liveness: ").append(toIndentedString(liveness)).append("\n");
    sb.append("    loudness: ").append(toIndentedString(loudness)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    speechiness: ").append(toIndentedString(speechiness)).append("\n");
    sb.append("    tempo: ").append(toIndentedString(tempo)).append("\n");
    sb.append("    timeSignature: ").append(toIndentedString(timeSignature)).append("\n");
    sb.append("    valence: ").append(toIndentedString(valence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

