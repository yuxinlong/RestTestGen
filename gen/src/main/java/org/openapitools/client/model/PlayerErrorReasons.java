/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * * &#x60;NO_PREV_TRACK&#x60; - The command requires a previous track, but there is none in the context. * &#x60;NO_NEXT_TRACK&#x60; - The command requires a next track, but there is none in the context. * &#x60;NO_SPECIFIC_TRACK&#x60; - The requested track does not exist. * &#x60;ALREADY_PAUSED&#x60; - The command requires playback to not be paused. * &#x60;NOT_PAUSED&#x60; - The command requires playback to be paused. * &#x60;NOT_PLAYING_LOCALLY&#x60; - The command requires playback on the local device. * &#x60;NOT_PLAYING_TRACK&#x60; - The command requires that a track is currently playing. * &#x60;NOT_PLAYING_CONTEXT&#x60; - The command requires that a context is currently playing. * &#x60;ENDLESS_CONTEXT&#x60; - The shuffle command cannot be applied on an endless context. * &#x60;CONTEXT_DISALLOW&#x60; - The command could not be performed on the context. * &#x60;ALREADY_PLAYING&#x60; - The track should not be restarted if the same track and context is already playing, and there is a resume point. * &#x60;RATE_LIMITED&#x60; - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming. * &#x60;REMOTE_CONTROL_DISALLOW&#x60; - The context cannot be remote-controlled. * &#x60;DEVICE_NOT_CONTROLLABLE&#x60; - Not possible to remote control the device. * &#x60;VOLUME_CONTROL_DISALLOW&#x60; - Not possible to remote control the device&#39;s volume. * &#x60;NO_ACTIVE_DEVICE&#x60; - Requires an active device and the user has none. * &#x60;PREMIUM_REQUIRED&#x60; - The request is prohibited for non-premium users. * &#x60;UNKNOWN&#x60; - Certain actions are restricted because of unknown reasons. 
 */
@JsonAdapter(PlayerErrorReasons.Adapter.class)
public enum PlayerErrorReasons {
  
  NO_PREV_TRACK("NO_PREV_TRACK"),
  
  NO_NEXT_TRACK("NO_NEXT_TRACK"),
  
  NO_SPECIFIC_TRACK("NO_SPECIFIC_TRACK"),
  
  ALREADY_PAUSED("ALREADY_PAUSED"),
  
  NOT_PAUSED("NOT_PAUSED"),
  
  NOT_PLAYING_LOCALLY("NOT_PLAYING_LOCALLY"),
  
  NOT_PLAYING_TRACK("NOT_PLAYING_TRACK"),
  
  NOT_PLAYING_CONTEXT("NOT_PLAYING_CONTEXT"),
  
  ENDLESS_CONTEXT("ENDLESS_CONTEXT"),
  
  CONTEXT_DISALLOW("CONTEXT_DISALLOW"),
  
  ALREADY_PLAYING("ALREADY_PLAYING"),
  
  RATE_LIMITED("RATE_LIMITED"),
  
  REMOTE_CONTROL_DISALLOW("REMOTE_CONTROL_DISALLOW"),
  
  DEVICE_NOT_CONTROLLABLE("DEVICE_NOT_CONTROLLABLE"),
  
  VOLUME_CONTROL_DISALLOW("VOLUME_CONTROL_DISALLOW"),
  
  NO_ACTIVE_DEVICE("NO_ACTIVE_DEVICE"),
  
  PREMIUM_REQUIRED("PREMIUM_REQUIRED"),
  
  UNKNOWN("UNKNOWN");

  private String value;

  PlayerErrorReasons(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PlayerErrorReasons fromValue(String value) {
    for (PlayerErrorReasons b : PlayerErrorReasons.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PlayerErrorReasons> {
    @Override
    public void write(final JsonWriter jsonWriter, final PlayerErrorReasons enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PlayerErrorReasons read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PlayerErrorReasons.fromValue(value);
    }
  }
}

