/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SimplifiedArtistObject;

/**
 * SimplifiedAlbumObjectAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class SimplifiedAlbumObjectAllOf {
  /**
   * The field is present when getting an artist&#39;s albums. Compare to album_type this field represents relationship between the artist and the album. 
   */
  @JsonAdapter(AlbumGroupEnum.Adapter.class)
  public enum AlbumGroupEnum {
    ALBUM("album"),
    
    SINGLE("single"),
    
    COMPILATION("compilation"),
    
    APPEARS_ON("appears_on");

    private String value;

    AlbumGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlbumGroupEnum fromValue(String value) {
      for (AlbumGroupEnum b : AlbumGroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlbumGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlbumGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlbumGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlbumGroupEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALBUM_GROUP = "album_group";
  @SerializedName(SERIALIZED_NAME_ALBUM_GROUP)
  private AlbumGroupEnum albumGroup;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<SimplifiedArtistObject> artists = new ArrayList<SimplifiedArtistObject>();


  public SimplifiedAlbumObjectAllOf albumGroup(AlbumGroupEnum albumGroup) {
    
    this.albumGroup = albumGroup;
    return this;
  }

   /**
   * The field is present when getting an artist&#39;s albums. Compare to album_type this field represents relationship between the artist and the album. 
   * @return albumGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "compilation", value = "The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album. ")

  public AlbumGroupEnum getAlbumGroup() {
    return albumGroup;
  }


  public void setAlbumGroup(AlbumGroupEnum albumGroup) {
    this.albumGroup = albumGroup;
  }


  public SimplifiedAlbumObjectAllOf artists(List<SimplifiedArtistObject> artists) {
    
    this.artists = artists;
    return this;
  }

  public SimplifiedAlbumObjectAllOf addArtistsItem(SimplifiedArtistObject artistsItem) {
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists of the album. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist. 
   * @return artists
  **/
  @ApiModelProperty(required = true, value = "The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. ")

  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }


  public void setArtists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplifiedAlbumObjectAllOf simplifiedAlbumObjectAllOf = (SimplifiedAlbumObjectAllOf) o;
    return Objects.equals(this.albumGroup, simplifiedAlbumObjectAllOf.albumGroup) &&
        Objects.equals(this.artists, simplifiedAlbumObjectAllOf.artists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumGroup, artists);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplifiedAlbumObjectAllOf {\n");
    sb.append("    albumGroup: ").append(toIndentedString(albumGroup)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

