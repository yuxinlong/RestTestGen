/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * SectionObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T15:44:39.866286+08:00[Asia/Shanghai]")
public class SectionObject {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private Integer key;

  public static final String SERIALIZED_NAME_KEY_CONFIDENCE = "key_confidence";
  @SerializedName(SERIALIZED_NAME_KEY_CONFIDENCE)
  private BigDecimal keyConfidence;

  public static final String SERIALIZED_NAME_LOUDNESS = "loudness";
  @SerializedName(SERIALIZED_NAME_LOUDNESS)
  private BigDecimal loudness;

  /**
   * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \&quot;minor\&quot;, a 1 for \&quot;major\&quot;, or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    NUMBER_MINUS_1(new BigDecimal("-1")),
    
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1"));

    private BigDecimal value;

    ModeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(BigDecimal value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MODE_CONFIDENCE = "mode_confidence";
  @SerializedName(SERIALIZED_NAME_MODE_CONFIDENCE)
  private BigDecimal modeConfidence;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private BigDecimal start;

  public static final String SERIALIZED_NAME_TEMPO = "tempo";
  @SerializedName(SERIALIZED_NAME_TEMPO)
  private BigDecimal tempo;

  public static final String SERIALIZED_NAME_TEMPO_CONFIDENCE = "tempo_confidence";
  @SerializedName(SERIALIZED_NAME_TEMPO_CONFIDENCE)
  private BigDecimal tempoConfidence;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE = "time_signature";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE)
  private Integer timeSignature;

  public static final String SERIALIZED_NAME_TIME_SIGNATURE_CONFIDENCE = "time_signature_confidence";
  @SerializedName(SERIALIZED_NAME_TIME_SIGNATURE_CONFIDENCE)
  private BigDecimal timeSignatureConfidence;


  public SectionObject confidence(BigDecimal confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * The confidence, from 0.0 to 1.0, of the reliability of the section&#39;s \&quot;designation\&quot;.
   * minimum: 0
   * maximum: 1
   * @return confidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".")

  public BigDecimal getConfidence() {
    return confidence;
  }


  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public SectionObject duration(BigDecimal duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * The duration (in seconds) of the section.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6.97092", value = "The duration (in seconds) of the section.")

  public BigDecimal getDuration() {
    return duration;
  }


  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public SectionObject key(Integer key) {
    
    this.key = key;
    return this;
  }

   /**
   * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 &#x3D; C, 1 &#x3D; C♯/D♭, 2 &#x3D; D, and so on). If no key was detected, the value is -1.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9", value = "The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.")

  public Integer getKey() {
    return key;
  }


  public void setKey(Integer key) {
    this.key = key;
  }


  public SectionObject keyConfidence(BigDecimal keyConfidence) {
    
    this.keyConfidence = keyConfidence;
    return this;
  }

   /**
   * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
   * minimum: 0
   * maximum: 1
   * @return keyConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.297", value = "The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.")

  public BigDecimal getKeyConfidence() {
    return keyConfidence;
  }


  public void setKeyConfidence(BigDecimal keyConfidence) {
    this.keyConfidence = keyConfidence;
  }


  public SectionObject loudness(BigDecimal loudness) {
    
    this.loudness = loudness;
    return this;
  }

   /**
   * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
   * @return loudness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-14.938", value = "The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.")

  public BigDecimal getLoudness() {
    return loudness;
  }


  public void setLoudness(BigDecimal loudness) {
    this.loudness = loudness;
  }


  public SectionObject mode(ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \&quot;minor\&quot;, a 1 for \&quot;major\&quot;, or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.")

  public ModeEnum getMode() {
    return mode;
  }


  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public SectionObject modeConfidence(BigDecimal modeConfidence) {
    
    this.modeConfidence = modeConfidence;
    return this;
  }

   /**
   * The confidence, from 0.0 to 1.0, of the reliability of the &#x60;mode&#x60;.
   * minimum: 0
   * maximum: 1
   * @return modeConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.471", value = "The confidence, from 0.0 to 1.0, of the reliability of the `mode`.")

  public BigDecimal getModeConfidence() {
    return modeConfidence;
  }


  public void setModeConfidence(BigDecimal modeConfidence) {
    this.modeConfidence = modeConfidence;
  }


  public SectionObject start(BigDecimal start) {
    
    this.start = start;
    return this;
  }

   /**
   * The starting point (in seconds) of the section.
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The starting point (in seconds) of the section.")

  public BigDecimal getStart() {
    return start;
  }


  public void setStart(BigDecimal start) {
    this.start = start;
  }


  public SectionObject tempo(BigDecimal tempo) {
    
    this.tempo = tempo;
    return this;
  }

   /**
   * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
   * @return tempo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "113.178", value = "The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.")

  public BigDecimal getTempo() {
    return tempo;
  }


  public void setTempo(BigDecimal tempo) {
    this.tempo = tempo;
  }


  public SectionObject tempoConfidence(BigDecimal tempoConfidence) {
    
    this.tempoConfidence = tempoConfidence;
    return this;
  }

   /**
   * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don&#39;t contain tempo (like pure speech) which would correspond to a low value in this field.
   * minimum: 0
   * maximum: 1
   * @return tempoConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.647", value = "The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.")

  public BigDecimal getTempoConfidence() {
    return tempoConfidence;
  }


  public void setTempoConfidence(BigDecimal tempoConfidence) {
    this.tempoConfidence = tempoConfidence;
  }


  public SectionObject timeSignature(Integer timeSignature) {
    
    this.timeSignature = timeSignature;
    return this;
  }

   /**
   * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \&quot;3/4\&quot;, to \&quot;7/4\&quot;.
   * minimum: 3
   * maximum: 7
   * @return timeSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".")

  public Integer getTimeSignature() {
    return timeSignature;
  }


  public void setTimeSignature(Integer timeSignature) {
    this.timeSignature = timeSignature;
  }


  public SectionObject timeSignatureConfidence(BigDecimal timeSignatureConfidence) {
    
    this.timeSignatureConfidence = timeSignatureConfidence;
    return this;
  }

   /**
   * The confidence, from 0.0 to 1.0, of the reliability of the &#x60;time_signature&#x60;. Sections with time signature changes may correspond to low values in this field.
   * minimum: 0
   * maximum: 1
   * @return timeSignatureConfidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.")

  public BigDecimal getTimeSignatureConfidence() {
    return timeSignatureConfidence;
  }


  public void setTimeSignatureConfidence(BigDecimal timeSignatureConfidence) {
    this.timeSignatureConfidence = timeSignatureConfidence;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SectionObject sectionObject = (SectionObject) o;
    return Objects.equals(this.confidence, sectionObject.confidence) &&
        Objects.equals(this.duration, sectionObject.duration) &&
        Objects.equals(this.key, sectionObject.key) &&
        Objects.equals(this.keyConfidence, sectionObject.keyConfidence) &&
        Objects.equals(this.loudness, sectionObject.loudness) &&
        Objects.equals(this.mode, sectionObject.mode) &&
        Objects.equals(this.modeConfidence, sectionObject.modeConfidence) &&
        Objects.equals(this.start, sectionObject.start) &&
        Objects.equals(this.tempo, sectionObject.tempo) &&
        Objects.equals(this.tempoConfidence, sectionObject.tempoConfidence) &&
        Objects.equals(this.timeSignature, sectionObject.timeSignature) &&
        Objects.equals(this.timeSignatureConfidence, sectionObject.timeSignatureConfidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, duration, key, keyConfidence, loudness, mode, modeConfidence, start, tempo, tempoConfidence, timeSignature, timeSignatureConfidence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SectionObject {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    keyConfidence: ").append(toIndentedString(keyConfidence)).append("\n");
    sb.append("    loudness: ").append(toIndentedString(loudness)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modeConfidence: ").append(toIndentedString(modeConfidence)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    tempo: ").append(toIndentedString(tempo)).append("\n");
    sb.append("    tempoConfidence: ").append(toIndentedString(tempoConfidence)).append("\n");
    sb.append("    timeSignature: ").append(toIndentedString(timeSignature)).append("\n");
    sb.append("    timeSignatureConfidence: ").append(toIndentedString(timeSignatureConfidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

