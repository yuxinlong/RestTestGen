/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 2023.2.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlbumObject;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.PagingSavedAlbumObject;
import org.openapitools.client.model.PagingSimplifiedAlbumObject;
import org.openapitools.client.model.PagingSimplifiedTrackObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlbumsApi {
    private ApiClient localVarApiClient;

    public AlbumsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for checkUsersSavedAlbums
     * @param ids  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedAlbumsCall(String ids, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUsersSavedAlbumsValidateBeforeCall(String ids, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkUsersSavedAlbums(Async)");
        }
        

        okhttp3.Call localVarCall = checkUsersSavedAlbumsCall(ids, _callback);
        return localVarCall;

    }

    /**
     * Check User&#39;s Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public List<Boolean> checkUsersSavedAlbums(String ids) throws ApiException {
        ApiResponse<List<Boolean>> localVarResp = checkUsersSavedAlbumsWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Check User&#39;s Saved Albums 
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Boolean>> checkUsersSavedAlbumsWithHttpInfo(String ids) throws ApiException {
        okhttp3.Call localVarCall = checkUsersSavedAlbumsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check User&#39;s Saved Albums  (asynchronously)
     * Check if one or more albums is already saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of booleans </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUsersSavedAlbumsAsync(String ids, final ApiCallback<List<Boolean>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUsersSavedAlbumsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnAlbum
     * @param id  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumCall(String id, String market, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnAlbumValidateBeforeCall(String id, String market, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnAlbum(Async)");
        }
        

        okhttp3.Call localVarCall = getAnAlbumCall(id, market, _callback);
        return localVarCall;

    }

    /**
     * Get Album 
     * Get Spotify catalog information for a single album. 
     * @param id  (required)
     * @param market  (optional)
     * @return AlbumObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public AlbumObject getAnAlbum(String id, String market) throws ApiException {
        ApiResponse<AlbumObject> localVarResp = getAnAlbumWithHttpInfo(id, market);
        return localVarResp.getData();
    }

    /**
     * Get Album 
     * Get Spotify catalog information for a single album. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;AlbumObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlbumObject> getAnAlbumWithHttpInfo(String id, String market) throws ApiException {
        okhttp3.Call localVarCall = getAnAlbumValidateBeforeCall(id, market, null);
        Type localVarReturnType = new TypeToken<AlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Album  (asynchronously)
     * Get Spotify catalog information for a single album. 
     * @param id  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An album </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumAsync(String id, String market, final ApiCallback<AlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnAlbumValidateBeforeCall(id, market, _callback);
        Type localVarReturnType = new TypeToken<AlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnAlbumsTracks
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumsTracksCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums/{id}/tracks"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnAlbumsTracksValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnAlbumsTracks(Async)");
        }
        

        okhttp3.Call localVarCall = getAnAlbumsTracksCall(id, market, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSimplifiedTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSimplifiedTrackObject getAnAlbumsTracks(String id, String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSimplifiedTrackObject> localVarResp = getAnAlbumsTracksWithHttpInfo(id, market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSimplifiedTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSimplifiedTrackObject> getAnAlbumsTracksWithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAnAlbumsTracksValidateBeforeCall(id, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Album Tracks  (asynchronously)
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of tracks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnAlbumsTracksAsync(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedTrackObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnAlbumsTracksValidateBeforeCall(id, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnArtistsAlbums
     * @param id  (required)
     * @param includeGroups  (optional)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnArtistsAlbumsCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artists/{id}/albums"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_groups", includeGroups));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnArtistsAlbumsValidateBeforeCall(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnArtistsAlbums(Async)");
        }
        

        okhttp3.Call localVarCall = getAnArtistsAlbumsCall(id, includeGroups, market, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get Artist&#39;s Albums 
     * Get Spotify catalog information about an artist&#39;s albums. 
     * @param id  (required)
     * @param includeGroups  (optional)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSimplifiedAlbumObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSimplifiedAlbumObject getAnArtistsAlbums(String id, String includeGroups, String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSimplifiedAlbumObject> localVarResp = getAnArtistsAlbumsWithHttpInfo(id, includeGroups, market, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get Artist&#39;s Albums 
     * Get Spotify catalog information about an artist&#39;s albums. 
     * @param id  (required)
     * @param includeGroups  (optional)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSimplifiedAlbumObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSimplifiedAlbumObject> getAnArtistsAlbumsWithHttpInfo(String id, String includeGroups, String market, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAnArtistsAlbumsValidateBeforeCall(id, includeGroups, market, limit, offset, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artist&#39;s Albums  (asynchronously)
     * Get Spotify catalog information about an artist&#39;s albums. 
     * @param id  (required)
     * @param includeGroups  (optional)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnArtistsAlbumsAsync(String id, String includeGroups, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnArtistsAlbumsValidateBeforeCall(id, includeGroups, market, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PagingSimplifiedAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultipleAlbums
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleAlbumsCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleAlbumsValidateBeforeCall(String ids, String market, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getMultipleAlbums(Async)");
        }
        

        okhttp3.Call localVarCall = getMultipleAlbumsCall(ids, market, _callback);
        return localVarCall;

    }

    /**
     * Get Several Albums 
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 getMultipleAlbums(String ids, String market) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = getMultipleAlbumsWithHttpInfo(ids, market);
        return localVarResp.getData();
    }

    /**
     * Get Several Albums 
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> getMultipleAlbumsWithHttpInfo(String ids, String market) throws ApiException {
        okhttp3.Call localVarCall = getMultipleAlbumsValidateBeforeCall(ids, market, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Several Albums  (asynchronously)
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultipleAlbumsAsync(String ids, String market, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleAlbumsValidateBeforeCall(ids, market, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNewReleases
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewReleasesCall(String country, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browse/new-releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewReleasesValidateBeforeCall(String country, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getNewReleasesCall(country, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Get New Releases 
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 getNewReleases(String country, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = getNewReleasesWithHttpInfo(country, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get New Releases 
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> getNewReleasesWithHttpInfo(String country, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getNewReleasesValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get New Releases  (asynchronously)
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @param country  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paged set of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewReleasesAsync(String country, Integer limit, Integer offset, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewReleasesValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersSavedAlbums
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param market  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedAlbumsCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersSavedAlbumsValidateBeforeCall(Integer limit, Integer offset, String market, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUsersSavedAlbumsCall(limit, offset, market, _callback);
        return localVarCall;

    }

    /**
     * Get User&#39;s Saved Albums 
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param market  (optional)
     * @return PagingSavedAlbumObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public PagingSavedAlbumObject getUsersSavedAlbums(Integer limit, Integer offset, String market) throws ApiException {
        ApiResponse<PagingSavedAlbumObject> localVarResp = getUsersSavedAlbumsWithHttpInfo(limit, offset, market);
        return localVarResp.getData();
    }

    /**
     * Get User&#39;s Saved Albums 
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param market  (optional)
     * @return ApiResponse&lt;PagingSavedAlbumObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagingSavedAlbumObject> getUsersSavedAlbumsWithHttpInfo(Integer limit, Integer offset, String market) throws ApiException {
        okhttp3.Call localVarCall = getUsersSavedAlbumsValidateBeforeCall(limit, offset, market, null);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User&#39;s Saved Albums  (asynchronously)
     * Get a list of the albums saved in the current Spotify user&#39;s &#39;Your Music&#39; library. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param market  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pages of albums </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersSavedAlbumsAsync(Integer limit, Integer offset, String market, final ApiCallback<PagingSavedAlbumObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersSavedAlbumsValidateBeforeCall(limit, offset, market, _callback);
        Type localVarReturnType = new TypeToken<PagingSavedAlbumObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAlbumsUser
     * @param ids  (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlbumsUserCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAlbumsUserValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeAlbumsUser(Async)");
        }
        

        okhttp3.Call localVarCall = removeAlbumsUserCall(ids, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Remove Users&#39; Saved Albums 
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void removeAlbumsUser(String ids, Map<String, Object> requestBody) throws ApiException {
        removeAlbumsUserWithHttpInfo(ids, requestBody);
    }

    /**
     * Remove Users&#39; Saved Albums 
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAlbumsUserWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeAlbumsUserValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Users&#39; Saved Albums  (asynchronously)
     * Remove one or more albums from the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Album(s) have been removed from the library </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlbumsUserAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAlbumsUserValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAlbumsUser
     * @param ids  (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAlbumsUserCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAlbumsUserValidateBeforeCall(String ids, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveAlbumsUser(Async)");
        }
        

        okhttp3.Call localVarCall = saveAlbumsUserCall(ids, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public void saveAlbumsUser(String ids, Map<String, Object> requestBody) throws ApiException {
        saveAlbumsUserWithHttpInfo(ids, requestBody);
    }

    /**
     * Save Albums for Current User 
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveAlbumsUserWithHttpInfo(String ids, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveAlbumsUserValidateBeforeCall(ids, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Albums for Current User  (asynchronously)
     * Save one or more albums to the current user&#39;s &#39;Your Music&#39; library. 
     * @param ids  (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album is saved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won&#39;t help here.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The app has exceeded its rate limits.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAlbumsUserAsync(String ids, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAlbumsUserValidateBeforeCall(ids, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
